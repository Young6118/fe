(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{367:function(t,s,a){"use strict";a.r(s);var e=a(25),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[t._v("#")]),t._v(" 网络")]),t._v(" "),a("h2",{attrs:{id:"跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),a("p",[t._v("同源条件：协议、域名、端口相同")]),t._v(" "),a("p",[t._v("同源策略限制以下几种行为：")]),t._v(" "),a("ul",[a("li",[t._v("Cookie、LocalStorage 和 IndexDB 无法读取")]),t._v(" "),a("li",[t._v("DOM和JS对象无法获得")]),t._v(" "),a("li",[t._v("AJAX 请求不能发送")])]),t._v(" "),a("p",[t._v("对于端口、协议的不同，只能后端解决。我们解决域名不同的情况：")]),t._v(" "),a("p",[t._v("1.jsonp（只支持get请求，支持老的IE浏览器）适合加载不同域名的js、css，img等静态资源；")]),t._v(" "),a("blockquote",[a("p",[t._v("jsonp的原理就是利用"),a("code",[t._v("<script>")]),t._v("标签没有跨域限制，通过"),a("code",[t._v("<script")]),t._v(">标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原生JS实现：")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/javascript'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数")]),t._v("\n    script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.domain2.com:8080/login?user=admin&callback=handleCallback'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回调执行函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务端返回如下（返回时即执行全局函数）：")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"success"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"admin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("2.CORS（支持所有类型的HTTP请求，但浏览器IE10以下不支持）适合做ajax各种跨域请求；")]),t._v(" "),a("blockquote",[a("p",[t._v("服务端：设置响应头"),a("code",[t._v("Access-Control-Allow-Origin： *")]),t._v("，允许任意域向服务提交请求\n前端设置 xhr.withCredentials = true;")])]),t._v(" "),a("p",[t._v("3.Nginx代理跨域和nodejs中间件跨域原理都相似，都是搭建一个服务器，直接在服务器端请求HTTP接口，这适合前后端分离的前端项目调后端接口。")]),t._v(" "),a("blockquote",[a("p",[t._v("nginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。")])]),t._v(" "),a("p",[t._v("4.document.domain+iframe 适合主域名相同，子域名不同的跨域请求。")]),t._v(" "),a("p",[t._v("5.postMessage、websocket 都是HTML5新特性，兼容性不是很好，只适用于主流浏览器和IE10+。")]),t._v(" "),a("p",[t._v('CORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）。\n它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。\nCORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。')]),t._v(" "),a("p",[t._v("浏览器将CORS跨域请求分为简单请求和非简单请求。")]),t._v(" "),a("h2",{attrs:{id:"简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[t._v("#")]),t._v(" 简单请求")]),t._v(" "),a("p",[t._v("只要同时满足以下两个条件，就属于简单请求")]),t._v(" "),a("p",[t._v("(1)使用下列方法之一：")]),t._v(" "),a("ul",[a("li",[t._v("head")]),t._v(" "),a("li",[t._v("get")]),t._v(" "),a("li",[t._v("post")])]),t._v(" "),a("p",[t._v("(2)请求的Heder是")]),t._v(" "),a("ul",[a("li",[t._v("Accept")]),t._v(" "),a("li",[t._v("Accept-Language")]),t._v(" "),a("li",[t._v("Content-Language")]),t._v(" "),a("li",[t._v("Content-Type: 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain")])]),t._v(" "),a("p",[t._v("不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。")]),t._v(" "),a("p",[t._v("对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("GET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。")]),t._v(" "),a("p",[t._v("CORS请求设置的响应头字段，都以 Access-Control-开头:")]),t._v(" "),a("p",[t._v("1）Access-Control-Allow-Origin：必选")]),t._v(" "),a("p",[t._v("它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。")]),t._v(" "),a("p",[t._v("2）Access-Control-Allow-Credentials：可选")]),t._v(" "),a("p",[t._v("它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。")]),t._v(" "),a("p",[t._v("3）Access-Control-Expose-Headers：可选")]),t._v(" "),a("p",[t._v("CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。")]),t._v(" "),a("p",[t._v("非简单请求")]),t._v(" "),a("p",[t._v('非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为"预检"请求（preflight）。')]),t._v(" "),a("p",[t._v("预检请求")]),t._v(" "),a("p",[t._v('预检"请求用的请求方法是OPTIONS，表示这个请求是用来询问的。请求头信息里面，关键字段是Origin，表示请求来自哪个源。除了Origin字段，"预检"请求的头信息包括两个特殊字段。')]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OPTIONS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("cors "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\nOrigin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("api"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\nAccess"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Request"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Method"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PUT")]),t._v("\nAccess"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Request"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Headers"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Custom"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Header\nHost"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" api"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\nAccept"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Language"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" en"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("US")]),t._v("\nConnection"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" keep"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("alive\nUser"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Agent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Mozilla"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("1）Access-Control-Request-Method：必选")]),t._v(" "),a("p",[t._v("用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。")]),t._v(" "),a("p",[t._v("2）Access-Control-Request-Headers：可选")]),t._v(" "),a("p",[t._v("该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。")]),t._v(" "),a("p",[t._v("预检请求的回应")]),t._v(" "),a("p",[t._v('服务器收到"预检"请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。')]),t._v(" "),a("p",[t._v("HTTP回应中，除了关键的是Access-Control-Allow-Origin字段，其他CORS相关字段如下：")]),t._v(" "),a("p",[t._v("1）Access-Control-Allow-Methods：必选")]),t._v(" "),a("p",[t._v('它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次"预检"请求。')]),t._v(" "),a("p",[t._v("2）Access-Control-Allow-Headers")]),t._v(" "),a("p",[t._v('如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在"预检"中请求的字段。')]),t._v(" "),a("p",[t._v("3）Access-Control-Allow-Credentials：可选")]),t._v(" "),a("p",[t._v("该字段与简单请求时的含义相同。")]),t._v(" "),a("p",[t._v("4）Access-Control-Max-Age：可选")]),t._v(" "),a("p",[t._v("用来指定本次预检请求的有效期，单位为秒。")]),t._v(" "),a("h2",{attrs:{id:"说一下http-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下http-是什么"}},[t._v("#")]),t._v(" 说一下http 是什么")]),t._v(" "),a("p",[t._v("超文本传输协议，使用计算机能够理解的语言确立了计算机之间通信的规范，用于两节点之间传输文字、图片、音频、视频等超文本数据信息的约定和规范。")]),t._v(" "),a("p",[t._v("状态码 200和304是什么，有什么区别")]),t._v(" "),a("h2",{attrs:{id:"http-缓存策略-强缓存与协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存策略-强缓存与协商缓存"}},[t._v("#")]),t._v(" http 缓存策略 强缓存与协商缓存")]),t._v(" "),a("h3",{attrs:{id:"无缓存-200-size-1mb-time-500ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无缓存-200-size-1mb-time-500ms"}},[t._v("#")]),t._v(" 无缓存 "),a("code",[t._v("200 (size: 1mb, time: 500ms)")])]),t._v(" "),a("p",[a("code",[t._v("cache-control: no-store")])]),t._v(" "),a("h3",{attrs:{id:"协商缓存：需要与服务端发生交互，判断是否使用本地缓存的文件。304-size-350b-time-100ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存：需要与服务端发生交互，判断是否使用本地缓存的文件。304-size-350b-time-100ms"}},[t._v("#")]),t._v(" 协商缓存：需要与服务端发生交互，判断是否使用本地缓存的文件。"),a("code",[t._v("304 (size: 350b, time: 100ms)")])]),t._v(" "),a("p",[t._v("304请求判断是否使用本地缓存，缓存命中使用本地缓存")]),t._v(" "),a("p",[a("code",[t._v("cache-control: no-cache")]),t._v("跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。")]),t._v(" "),a("p",[t._v("响应头设置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ETag\nLast-Modified\n")])])]),a("p",[t._v("步骤总结：\n1.请求资源时，把用户本地该资源的 etag 同时带到服务端，服务端和最新资源做对比。\n2.如果资源没更改，返回304，浏览器读取本地缓存。\n3.如果资源有更改，返回200，返回最新的资源。")]),t._v(" "),a("h3",{attrs:{id:"强缓存：无需与服务端发生交互200-size-from-memory-cache-time-0ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存：无需与服务端发生交互200-size-from-memory-cache-time-0ms"}},[t._v("#")]),t._v(" 强缓存：无需与服务端发生交互"),a("code",[t._v("200 (size:from memory cache, time: 0ms)")])]),t._v(" "),a("p",[t._v("有 max-age 设置强缓存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Expires 过期时间\nCache-Control: public/max-age=1111111/no-cache\n")])])]),a("p",[t._v("最佳实践：")]),t._v(" "),a("p",[t._v("index.html文件采用协商缓存，理由就是要用户每次请求index.html不拿浏览器缓存，直接请求服务器，这样就保证资源更新了，用户能马上访问到新资源，如果服务端返回304，这时候再拿浏览器的缓存的index.html，切记不要设置强缓存！！！")]),t._v(" "),a("p",[t._v("其他资源采用强缓存 + 协商缓存,理由就不多说了。")]),t._v(" "),a("p",[t._v("如果有一个网页访问是 200 fom cached\n刷新后是什么结果")]),t._v(" "),a("p",[t._v("max-age范围内，即使用户做了刷新操作，也不向服务器发起http请求")])])}),[],!1,null,null,null);s.default=n.exports}}]);